{"version":3,"sources":["../../../../public/plugins/input-mask/jquery.inputmask.numeric.extensions.js"],"names":["$","extend","inputmask","defaults","aliases","mask","placeholder","repeat","greedy","numericInput","isNumeric","digits","groupSeparator","radixPoint","groupSize","autoGroup","allowPlus","allowMinus","integerDigits","defaultValue","prefix","suffix","getMaskLength","buffer","currentBuffer","opts","calculatedLength","length","escapedGroupSeparator","escapeRegex","call","escapedRadixPoint","currentBufferStr","join","strippedBufferStr","replace","RegExp","groupOffset","postFormat","pos","reformatOnly","cbuf","slice","radixPos","inArray","splice","bufVal","indexOf","radixSplit","split","reg","test","i","l","charAt","newPos","regex","number","digitExpression","isNaN","signedExpression","onKeyDown","e","$input","input","keyCode","TAB","radixPosition","masksets","data","activeMasksetIndex","undefined","_valueSet","DELETE","BACKSPACE","definitions","validator","chrs","strict","bufferStr","isValid","lastGroupSeparator","lastIndexOf","cardinality","prevalidator","insertMode","autoUnmask","alias","jQuery"],"mappings":"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","file":"jquery.inputmask.numeric.extensions.js","sourcesContent":["/*\nInput Mask plugin extensions\nhttp://github.com/RobinHerbots/jquery.inputmask\nCopyright (c) 2010 - 2014 Robin Herbots\nLicensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\nVersion: 0.0.0\n\nOptional extensions on the jquery.inputmask base\n*/\n(function ($) {\n    //number aliases\n    $.extend($.inputmask.defaults.aliases, {\n        'decimal': {\n            mask: \"~\",\n            placeholder: \"\",\n            repeat: \"*\",\n            greedy: false,\n            numericInput: false,\n            isNumeric: true,\n            digits: \"*\", //number of fractionalDigits\n            groupSeparator: \"\",//\",\", // | \".\"\n            radixPoint: \".\",\n            groupSize: 3,\n            autoGroup: false,\n            allowPlus: true,\n            allowMinus: true,\n            //todo\n            integerDigits: \"*\", //number of integerDigits\n            defaultValue: \"\",\n            prefix: \"\",\n            suffix: \"\",\n\n            //todo\n            getMaskLength: function (buffer, greedy, repeat, currentBuffer, opts) { //custom getMaskLength to take the groupSeparator into account\n                var calculatedLength = buffer.length;\n\n                if (!greedy) {\n                    if (repeat == \"*\") {\n                        calculatedLength = currentBuffer.length + 1;\n                    } else if (repeat > 1) {\n                        calculatedLength += (buffer.length * (repeat - 1));\n                    }\n                }\n\n                var escapedGroupSeparator = $.inputmask.escapeRegex.call(this, opts.groupSeparator);\n                var escapedRadixPoint = $.inputmask.escapeRegex.call(this, opts.radixPoint);\n                var currentBufferStr = currentBuffer.join(''), strippedBufferStr = currentBufferStr.replace(new RegExp(escapedGroupSeparator, \"g\"), \"\").replace(new RegExp(escapedRadixPoint), \"\"),\n                groupOffset = currentBufferStr.length - strippedBufferStr.length;\n                return calculatedLength + groupOffset;\n            },\n            postFormat: function (buffer, pos, reformatOnly, opts) {\n                if (opts.groupSeparator == \"\") return pos;\n                var cbuf = buffer.slice(),\n                    radixPos = $.inArray(opts.radixPoint, buffer);\n                if (!reformatOnly) {\n                    cbuf.splice(pos, 0, \"?\"); //set position indicator\n                }\n                var bufVal = cbuf.join('');\n                if (opts.autoGroup || (reformatOnly && bufVal.indexOf(opts.groupSeparator) != -1)) {\n                    var escapedGroupSeparator = $.inputmask.escapeRegex.call(this, opts.groupSeparator);\n                    bufVal = bufVal.replace(new RegExp(escapedGroupSeparator, \"g\"), '');\n                    var radixSplit = bufVal.split(opts.radixPoint);\n                    bufVal = radixSplit[0];\n                    var reg = new RegExp('([-\\+]?[\\\\d\\?]+)([\\\\d\\?]{' + opts.groupSize + '})');\n                    while (reg.test(bufVal)) {\n                        bufVal = bufVal.replace(reg, '$1' + opts.groupSeparator + '$2');\n                        bufVal = bufVal.replace(opts.groupSeparator + opts.groupSeparator, opts.groupSeparator);\n                    }\n                    if (radixSplit.length > 1)\n                        bufVal += opts.radixPoint + radixSplit[1];\n                }\n                buffer.length = bufVal.length; //align the length\n                for (var i = 0, l = bufVal.length; i < l; i++) {\n                    buffer[i] = bufVal.charAt(i);\n                }\n                var newPos = $.inArray(\"?\", buffer);\n                if (!reformatOnly) buffer.splice(newPos, 1);\n\n                return reformatOnly ? pos : newPos;\n            },\n            regex: {\n                number: function (opts) {\n                    var escapedGroupSeparator = $.inputmask.escapeRegex.call(this, opts.groupSeparator);\n                    var escapedRadixPoint = $.inputmask.escapeRegex.call(this, opts.radixPoint);\n                    var digitExpression = isNaN(opts.digits) ? opts.digits : '{0,' + opts.digits + '}';\n                    var signedExpression = opts.allowPlus || opts.allowMinus ? \"[\" + (opts.allowPlus ? \"\\+\" : \"\") + (opts.allowMinus ? \"-\" : \"\") + \"]?\" : \"\";\n                    return new RegExp(\"^\" + signedExpression + \"(\\\\d+|\\\\d{1,\" + opts.groupSize + \"}((\" + escapedGroupSeparator + \"\\\\d{\" + opts.groupSize + \"})?)+)(\" + escapedRadixPoint + \"\\\\d\" + digitExpression + \")?$\");\n                }\n            },\n            onKeyDown: function (e, buffer, opts) {\n                var $input = $(this), input = this;\n                if (e.keyCode == opts.keyCode.TAB) {\n                    var radixPosition = $.inArray(opts.radixPoint, buffer);\n                    if (radixPosition != -1) {\n                        var masksets = $input.data('_inputmask')['masksets'];\n                        var activeMasksetIndex = $input.data('_inputmask')['activeMasksetIndex'];\n                        for (var i = 1; i <= opts.digits && i < opts.getMaskLength(masksets[activeMasksetIndex][\"_buffer\"], masksets[activeMasksetIndex][\"greedy\"], masksets[activeMasksetIndex][\"repeat\"], buffer, opts) ; i++) {\n                            if (buffer[radixPosition + i] == undefined || buffer[radixPosition + i] == \"\") buffer[radixPosition + i] = \"0\";\n                        }\n                        input._valueSet(buffer.join(''));\n                    }\n                } else if (e.keyCode == opts.keyCode.DELETE || e.keyCode == opts.keyCode.BACKSPACE) {\n                    opts.postFormat(buffer, 0, true, opts);\n                    input._valueSet(buffer.join(''));\n                    return true;\n                }\n            },\n            definitions: {\n                '~': { //real number\n                    validator: function (chrs, buffer, pos, strict, opts) {\n                        if (chrs == \"\") return false;\n                        if (!strict && pos <= 1 && buffer[0] === '0' && new RegExp(\"[\\\\d-]\").test(chrs) && buffer.join('').length == 1) { //handle first char\n                            buffer[0] = \"\";\n                            return { \"pos\": 0 };\n                        }\n\n                        var cbuf = strict ? buffer.slice(0, pos) : buffer.slice();\n\n                        cbuf.splice(pos, 0, chrs);\n                        var bufferStr = cbuf.join('');\n\n                        //strip groupseparator\n                        var escapedGroupSeparator = $.inputmask.escapeRegex.call(this, opts.groupSeparator);\n                        bufferStr = bufferStr.replace(new RegExp(escapedGroupSeparator, \"g\"), '');\n\n                        var isValid = opts.regex.number(opts).test(bufferStr);\n                        if (!isValid) {\n                            //let's help the regex a bit\n                            bufferStr += \"0\";\n                            isValid = opts.regex.number(opts).test(bufferStr);\n                            if (!isValid) {\n                                //make a valid group\n                                var lastGroupSeparator = bufferStr.lastIndexOf(opts.groupSeparator);\n                                for (var i = bufferStr.length - lastGroupSeparator; i <= 3; i++) {\n                                    bufferStr += \"0\";\n                                }\n\n                                isValid = opts.regex.number(opts).test(bufferStr);\n                                if (!isValid && !strict) {\n                                    if (chrs == opts.radixPoint) {\n                                        isValid = opts.regex.number(opts).test(\"0\" + bufferStr + \"0\");\n                                        if (isValid) {\n                                            buffer[pos] = \"0\";\n                                            pos++;\n                                            return { \"pos\": pos };\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        if (isValid != false && !strict && chrs != opts.radixPoint) {\n                            var newPos = opts.postFormat(buffer, pos, false, opts);\n                            return { \"pos\": newPos };\n                        }\n\n                        return isValid;\n                    },\n                    cardinality: 1,\n                    prevalidator: null\n                }\n            },\n            insertMode: true,\n            autoUnmask: false\n        },\n        'integer': {\n            regex: {\n                number: function (opts) {\n                    var escapedGroupSeparator = $.inputmask.escapeRegex.call(this, opts.groupSeparator);\n                    var signedExpression = opts.allowPlus || opts.allowMinus ? \"[\" + (opts.allowPlus ? \"\\+\" : \"\") + (opts.allowMinus ? \"-\" : \"\") + \"]?\" : \"\";\n                    return new RegExp(\"^\" + signedExpression + \"(\\\\d+|\\\\d{1,\" + opts.groupSize + \"}((\" + escapedGroupSeparator + \"\\\\d{\" + opts.groupSize + \"})?)+)$\");\n                }\n            },\n            alias: \"decimal\"\n        }\n    });\n})(jQuery);\n"]}